set transparency=2
set guioptions=acemg
" set guifont=source_code_pro:h10
set guifont=operator_mono_bold:h12<cr>

set guifontwide=source_code_pro:h10
set guicursor=n:blinkon0,v:blinkon0
set lines=90 columns=160

set cursorline
set textwidth=120
set colorcolumn=+1,+2,+3
set linespace=1
set fuoptions=maxvert

colorscheme tungsten
" highlight lessVariable guifg=#81a2be
" colorscheme jellybeans
" highlight ColorColumn guibg=#222222

set scrolloff=3
set sidescrolloff=1

set noballooneval

nnoremap <leader>ff :set guifont=fira_code_bold:h11<cr>
nnoremap <leader>fi :set guifont=inconsolata:h11<cr>
nnoremap <leader>fs :set guifont=source_code_pro:h10<cr>
nnoremap <leader>fl :set guifont=source_code_pro:h14<cr>

nnoremap <leader>fo :set guifont=operator_mono_bold:h12<cr>

" function! TextEnableCodeSnip(filetype,start,end,textSnipHl) abort
"   let ft=toupper(a:filetype)
"   let group='textGroup'.ft
"   if exists('b:current_syntax')
"     let s:current_syntax=b:current_syntax
"     " Remove current syntax definition, as some syntax files (e.g. cpp.vim)
"     " do nothing if b:current_syntax is defined.
"     unlet b:current_syntax
"   endif
"   execute 'syntax include @'.group.' syntax/'.a:filetype.'.vim'
"   try
"     execute 'syntax include @'.group.' after/syntax/'.a:filetype.'.vim'
"   catch
"   endtry
"   if exists('s:current_syntax')
"     let b:current_syntax=s:current_syntax
"   else
"     unlet b:current_syntax
"   endif
"   execute 'syntax region textSnip'.ft.'
"   \ matchgroup='.a:textSnipHl.'
"   \ start="'.a:start.'" end="'.a:end.'"
"   \ contains=@'.group
" endfunction
"
" call TextEnableCodeSnip('ruby', '@begin=ruby@', '@end=ruby@', 'SpecialComment')
" call TextEnableCodeSnip('sql',  '@begin=sql@',  '@end=sql@',  'SpecialComment')

if has("autocmd")
  augroup gvim_config
    autocmd!
    autocmd BufWritePost .gvimrc.before source %
    autocmd BufWritePost .gvimrc.after  source %
  augroup END
endif

if has("gui_macvim")
  let macvim_hig_shift_movement = 1
endif
