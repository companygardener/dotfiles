if filereadable(expand("~/.vimrc.before"))
  source ~/.vimrc.before
endif

set nocompatible
filetype off

set runtimepath+=~/.vim/bundle/vundle/
call vundle#rc()

" Core
Bundle 'gmarik/vundle'

" Colors
Bundle 'nanotech/jellybeans.vim'
Bundle 'w0ng/vim-hybrid'

" Languages
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'chrisbra/csv.vim'
Bundle 'depuracao/vim-rdoc'
Bundle 'elixir-lang/vim-elixir'
Bundle 'evanmiller/nginx-vim-syntax'
Bundle 'groenewege/vim-less'
Bundle 'guns/vim-clojure-static'
Bundle 'heartsentwined/vim-ember-script'
Bundle 'heartsentwined/vim-emblem'
Bundle 'jimenezrick/vimerl'
Bundle 'jnwhiteh/vim-golang'
Bundle 'kchmck/vim-coffee-script'
Bundle 'mmalecki/vim-node.js'
Bundle 'nono/vim-handlebars'
Bundle 'pangloss/vim-javascript'
Bundle 'rosstimson/scala-vim-support'
Bundle 'skwp/vim-rspec'
Bundle 'slim-template/vim-slim'
Bundle 'sunaku/vim-ruby-minitest'
Bundle 'tpope/vim-cucumber'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-liquid'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-rails'
Bundle 'vim-ruby/vim-ruby'
Bundle 'wlangstroth/vim-haskell'

" Tools
Bundle 'airblade/vim-gitgutter'
Bundle 'ap/vim-css-color'
Bundle 'garbas/vim-snipmate'
Bundle 'godlygeek/tabular'
Bundle 'honza/vim-snippets'
Bundle 'itspriddle/ZoomWin'
Bundle 'kien/ctrlp.vim'
Bundle 'majutsushi/tagbar'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'mikewest/vimroom'
Bundle 'rking/ag.vim'
Bundle 'rizzatti/funcoo.vim'
Bundle 'rizzatti/dash.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'tomtom/tlib_vim'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-speeddating'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'vim-scripts/dbext.vim'

" argtextobj.vim
" autotag
" powerline
" tcomment_vim
" vim-textobj-rubyblock
" vim-textobj-user
" vim-airline
" vimwiki
" https://github.com/dsawardekar/ember.vim
" https://github.com/edsono/vim-matchit
" https://github.com/ervandew/supertab
" https://github.com/mileszs/ack.vim
" https://github.com/sjl/gundo.vim
" https://github.com/michaeljsmith/vim-indent-object
" https://github.com/mattn/webapi-vim
" https://github.com/mattn/gist-vim
" https://github.com/vim-scripts/vimwiki
" https://github.com/Lokaltog/vim-easymotion
" https://github.com/chrisbra/NrrwRgn
" https://github.com/jeetsukumaran/vim-buffergator
" https://github.com/rgarver/Kwbd.vim
" https://github.com/kien/ctrlp.vim
" https://github.com/skalnik/vim-vroom
" https://github.com/tpope/vim-eunuch
" https://github.com/terryma/vim-multiple-cursors
" https://github.com/thinca/vim-visualstar
" https://github.com/bronson/vim-trailing-whitespace
"
" Lokaltog/powerline
" vim-scripts/Conque-Shell
" skwp/vim-ruby-conque
" rson/vim-conque
" jistr/vim-nerdtree-tabs
" tomtom/tplugin_vim

filetype plugin indent on

function! s:wrap()
  set wrap
  set linebreak
  set textwidth=80
  set nolist
endfunction

if has("autocmd")
  au Filetype make setlocal noexpandtab

  au BufRead,BufNewFile *.json set ft=javascript

  au BufRead,BufNewFile *.{md,markdown,txt} setf markdown
  au FileType markdown call s:wrap()

  au FileType python setlocal softtabstop=4 tabstop=4 shiftwidth=4

  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif
endif

if filereadable(expand("~/.vimrc.after"))
  source ~/.vimrc.after
endif
