if filereadable(expand("~/.vimrc.before"))
  source ~/.vimrc.before
endif

set nocompatible
filetype off

set runtimepath+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

" Colors
Bundle 'nanotech/jellybeans.vim'
Bundle 'w0ng/vim-hybrid'

" Languages
Bundle 'cakebaker/scss-syntax.vim'
Bundle 'chrisbra/csv.vim'
Bundle 'elixir-lang/vim-elixir'
Bundle 'groenewege/vim-less'
Bundle 'kchmck/vim-coffee-script'
Bundle 'mmalecki/vim-node.js'
Bundle 'nono/vim-handlebars'
Bundle 'pangloss/vim-javascript'
Bundle 'skwp/vim-rspec'
Bundle 'slim-template/vim-slim'
Bundle 'tpope/vim-cucumber'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-liquid'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-rails'
Bundle 'vim-ruby/vim-ruby'

" Tools
Bundle 'majutsushi/tagbar'
Bundle 'rizzatti/funcoo.vim'
Bundle 'rizzatti/dash.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
" Bundle 'vim-scripts/vimwiki'

filetype plugin indent on

function! s:wrap()
  set wrap
  set linebreak
  set textwidth=80
  set nolist
endfunction

if has("autocmd")
  au Filetype make setlocal noexpandtab

  au BufRead,BufNewFile *.json set ft=javascript

  au BufRead,BufNewFile *.{md,markdown,txt} setf markdown
  au FileType markdown call s:wrap()

  au FileType python setlocal softtabstop=4 tabstop=4 shiftwidth=4

  au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif
endif

if filereadable(expand("~/.vimrc.after"))
  source ~/.vimrc.after
endif
