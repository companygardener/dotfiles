# TODO: http://stackoverflow.com/questions/6127328/how-can-i-delete-all-git-branches-which-are-already-merged
# TODO: http://mroth.github.io/lolcommits/
#
# gem install github git-pulls

[user]
  name  = Erik Peterson
	email = erik.peterson@springleaf.com

[advice]
  statushints = false

[apply]
  ignorewhitespace = false

[branch]
  autosetupmerge  = true
  autosetuprebase = always

[color]
  branch      = auto
  diff        = auto
  grep        = auto
  interactive = auto
  showbranch  = auto
  status      = auto
  ui          = true

[color "branch"]
  current = yellow reverse
  local   = yellow
  remote  = green

[color "diff"]
  meta = yellow
  frag = magenta bold
  old  = red
  new  = green
  whitespace = red reverse

[color "status"]
  added     = yellow
  changed   = green
  untracked = cyan

[core]
  deltaBaseCacheLimit = 512m
  editor              = vim -pc ':normal gg'
  eol                 = native
  excludesfile        = ~/.gitignore
  pager               = less -FXR
  preloadindex        = true
  symlinks            = true
  whitespace          = fix,blank-at-eol,blank-at-eof,cr-at-eol,space-before-tab,-indent-with-non-tab,-tab-in-indent

[credential]
  helper = osxkeychain

[diff]
	algorithm = histogram
  renames   = copies
  mnemonicprefix = true

[diff "pdf-html"]
  textconv=pdf2htmlex

[difftool]
  prompt = false

[github]
  user = companygardener

[merge]
  keepbackup = false
  stat       = true
  tool       = vimdiff
  defaulttoupstream = true

[pull]
  default = upstream
  rebase  = true

[push]
	default = simple

[rebase]
  default = master

[rerere]
  enabled = true

[alias]
  assume     = update-index --assume-unchanged
  assumed    = "!git ls-files -v | grep ^h | cut -c 3-"
  a          = add
  aa         = add --all
  ae         = add --edit
  ai         = add --interactive
  amend      = commit --amend -C HEAD
  ap         = add --patch
  au         = add --update
  authors    = shortlog --numbered --summary --no-merges
  b          = branch -vv
  bib        = bisect bad
  big        = bisect good
  bis        = bisect skip
  bm         = branch --merged
  c          = commit
  ca         = commit --amend
  changes    = diff --name-status -r
  check      = diff --check
  cm         = commit --message
  co         = checkout
  conflicts  = grep --name-only --full-name '<<<<<<< HEAD'
  d          = diff
  dbm        = !git branch --merged | grep -v 'master\\|^\\*' | xargs git branch --delete
  dc         = diff --cached
  # div        = git-divergence
  ds         = diff --staged
  dt         = difftool
  dump       = cat-file -p
  graphviz   = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
  h          = help
  irb        = rebase --interactive
  l          = "!git log --date=short --pretty='%C(bold magenta)%h	%C(reset)%C(green)%cd	%C(bold green)%cN	%C(reset)%s%C(yellow)%d' $* | column -t -s '\t' | less -FXRS"
  lg         = log --graph --abbrev-commit --pretty='%C(bold magenta)%h %C(reset)%C(green)[%cr] %C(reset)%s %C(bold green)%an%C(reset)%C(yellow)%d'
  lga        = "!git log --graph --pretty='	%C(bold magenta)%h	%C(reset)%C(green)%cr	%C(reset)%s %C(bold green)%an%C(reset)%C(yellow)%d' $* | column -t -s '\t' | less -FXRS"
  lr         = log --graph --abbrev-commit --pretty='%C(bold magenta)%h %C(reset)%C(green)[%cr] %C(reset)%s %C(bold green)%an%C(reset)%C(yellow)%d' -20
  i          = ls-files --exclude-standard --ignored --others
  ls-ignored = ls-files --exclude-standard --ignored --others
  m          = merge -s recursive -X patience
  master     = checkout master
  mm         = merge --no-ff
  news       = log --patch HEAD@{1}..HEAD@{0}
  p          = cherry-pick --signoff
  pick       = cherry-pick
  pr         = "!f() { git fetch origin refs/pull/$1/head:pr/$1; } ; f"
  prune      = "!for remote in `git remote`; do git remote prune $remote; done"
  r          = remote
  rb         = rebase
  rba        = rebase --abort
  rbc        = rebase --continue
  rbs        = rebase --skip
  rh         = reset --hard
  ru         = remote update --prune
  s          = status --short --branch
  si         = status --short --branch --ignored
  sign       = commit --amend --signoff --reuse-message HEAD
  sl         = shortlog
  sm         = submodule
  sma        = submodule add
  small      = submodule foreach
  smu        = submodule update --init
  snapshot   = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  ss         = submodule summary
  st         = stash
  stl        = stash list
  stp        = stash pop
  stat       = diff --stat
  type       = cat-file -t
  unassume   = update-index --no-assume-unchanged
  undo       = reset --soft HEAD@{1}
  up         = !git remote update -p && git merge --ff-only @{u}
  wd         = diff --color-words
  wdb        = diff --color-words          --ignore-space-change
  wds        = diff --color-words --staged
  wdsb       = diff --color-words --staged --ignore-space-change
  who        = shortlog --numbered --summary --

[filter "media"]
	clean = git media clean %f
	smudge = git media smudge %f
	required = true
