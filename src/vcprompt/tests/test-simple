#!/bin/sh

# Simple tests that do not require any external tools: i.e.
# these just setup little fake working copies and make sure
# that vcprompt does the right thing in them.

vcprompt=$(dirname $(dirname $(readlink -f $0)))/vcprompt
if [ ! -x $vcprompt ]; then
    echo "error: vcprompt executable not found (expected $vcprompt)" >&2
    exit 1
fi

setup()
{
    tmpdir=`mktemp -d`
    trap cleanup 0 1 2 15
}

cleanup()
{
    chmod -R u+rwx $tmpdir
    rm -rf $tmpdir
}

failed=""
assert_vcprompt()
{
    message=$1
    expect=$2
    format=$3
    if [ -z "$format" ]; then
        format="%b"
    fi

    actual=`$vcprompt -f "$format"`
    if [ "$expect" != "$actual" ]; then
        echo "fail: $message: expected \"$expect\", but got \"$actual\"" >&2
        failed="y"
        return 1
    else
        echo "pass: $message"
    fi
}

test_no_vc()
{
    cd $tmpdir
    mkdir novc && cd novc
    assert_vcprompt "no vc 1" ""
    assert_vcprompt "no vc 2" "" "%n:%b"
}

test_root()
{
    cd /
    assert_vcprompt "root dir" ""
}

test_simple_cvs()
{
    cd $tmpdir
    mkdir cvs && cd cvs
    mkdir CVS

    assert_vcprompt "cvs notag" "cvs:trunk" "%n:%b"

    echo "Nsometag" > CVS/Tag
    assert_vcprompt "cvs nobranch" "cvs:(unknown)" "%n:%b"

    echo "Tfoo" > CVS/Tag
    assert_vcprompt "cvs branch" "foo"

    mkdir build && cd build
    assert_vcprompt "cvs subdir 1" "foo"

    mkdir CVS
    echo "Tblah" > CVS/Tag
    assert_vcprompt "cvs subdir 2" "blah"
}

test_simple_git()
{
    cd $tmpdir
    mkdir git && cd git
    mkdir .git

    assert_vcprompt "git broken 1" ""
    assert_vcprompt "git broken 2" "" "%n:%b"

    echo 0928349328 > .git/HEAD
    assert_vcprompt "git nobranch" "(unknown)"

    echo "ref: refs/heads/foo" > .git/HEAD
    assert_vcprompt "git branch" "git:foo" "%n:%b"

    mkdir subdir && cd subdir
    assert_vcprompt "git subdir" "foo"
}

test_simple_hg()
{
    cd $tmpdir
    mkdir hg && cd hg
    mkdir .hg

    assert_vcprompt "hg broken" ""

    echo foo > .hg/branch
    assert_vcprompt "hg top" "hg:foo" "%n:%b"

    mkdir subdir
    cd subdir
    assert_vcprompt "hg subdir" "foo"
}

test_simple_svn()
{
    cd $tmpdir
    mkdir simple_svn && cd simple_svn
    mkdir .svn

    assert_vcprompt "svn broken" "" "%n:%r"

    cat > .svn/entries <<EOF
10

dir
123
file:///whatever
file:///whatever



2009-05-17T11:31:06.550081Z
123
EOF
    assert_vcprompt "svn revision" "svn:123" "%n:%r"
}

test_xml_svn()
{
    cd $tmpdir
    mkdir xml_svn && cd xml_svn
    mkdir .svn

    cat > .svn/entries <<EOF
<?xml version="1.0" encoding="utf-8"?>
<wc-entries
   xmlns="svn:">
<entry
   committed-rev="14"
   name=""
   committed-date="2007-01-02T23:04:49.013976Z"
   url="svn+ssh://blah/home/svn/project/trunk"
   last-author="greg"
   kind="dir"
   uuid="8d4eacf1-9596-41ff-ba68-66ac5da389ce"
   url="svn+ssh://blah/home/svn/project"
   prop-time="2007-01-04T01:48:15.000000Z"
   revision="14"/>
EOF

   assert_vcprompt "svn xml 1" "svn:14" "%n:%r"
}

test_truncated_svn()
{
    cd $tmpdir
    mkdir truncated_svn && cd truncated_svn
    mkdir .svn
    cat > .svn/entries <<EOF
10

EOF
    assert_vcprompt "svn truncated 1" "" "%n:%r"

    # Add one more line to the entries file: it's still truncated!
    echo "dir" >> .svn/entries
    assert_vcprompt "svn truncated 2" "" "%n:%r"
}

test_bad_dir()
{
    cd $tmpdir
    set -e
    mkdir -p d1/d2
    cd d1/d2
    chmod a-rx ..
    assert_vcprompt "bad dir" ""
    chmod a+rx ..
}


#set -e

setup

test_no_vc
test_root
test_simple_cvs
test_simple_git
test_simple_hg
test_simple_svn
test_xml_svn
test_truncated_svn
test_bad_dir

if [ "$failed" ]; then
    echo "$0: some tests failed"
    exit 1
else
    echo "$0: all tests passed"
    exit 0
fi
