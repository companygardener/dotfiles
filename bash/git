MAX_CONFLICTED_FILES=2
DELTA_CHAR="✎"
CONFLICT_CHAR="☢"
BISECTING_TEXT="✄"
NOBRANCH_TEXT="DETACHED"
SUBMODULE_TEXT="submodule "

git-seconds() {
  now=$(date +%s)
  last=$(git log --pretty=format:'%at' -1 2> /dev/null)

  echo $((now - last))
}

git-minutes() {
  seconds=$(git-seconds)
  echo $((seconds / 60))
}

git-work-tree() {
  git rev-parse --is-inside-work-tree &> /dev/null
}

git-current-branch() {
  if git-work-tree; then
    branch=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD 2> /dev/null)

    if [[ $branch = "HEAD" ]]; then
      sha=$(git name-rev --name-only HEAD 2> /dev/null)

      if [[ $sha != "undefined" ]]; then
        echo "@$sha"
      else
        git rev-parse --short HEAD 2> /dev/null
      fi
    else
      echo "$branch"
    fi
  fi
}

git-prompt() {
  if git-work-tree; then
    status=$(git status)

    regex="(modified|deleted|new file):"

    if [[ $status =~ $regex ]]; then
      change=" $DELTA_CHAR "
    fi

    minutes=$(git-minutes)

    if ((minutes > 30)); then
      color=${RED}
    elif ((minutes > 10)); then
      color=${YELLOW}
    else
      color=${GREEN}
    fi

    message="${color}${minutes}m${NO_COLOR}"

    lead=$(echo "$status" | grep 'Your branch is ahead of' | awk '{ print $9 }')
    lag=$( echo "$status" | grep 'Your branch is behind'   | awk '{ print $8 }')

    if [[ -n $lead ]]; then
      offset=" +$lead"
    elif [[ -n $lag ]]; then
      ff=$(echo "$status" | grep "can be fast-forwarded")

      if [[ -n $ff ]]; then
        offset=" -$lag →"
      else
        offset=" -$lag"
      fi
    fi

    prompt="$YELLOW[$(git-current-branch)${offset}${change}]$NO_COLOR ${message}"
  fi

  echo -e "$prompt"
}


# any conflicts? (sed madness is to remove line breaks)
# files=\$(git ls-files -u | cut -f 2 | sort -u | sed '$(($MAX_CONFLICTED_FILES+1)),1000d' |  sed -e :a -e '\$!N;s/\\\n/, /;ta' -e 'P;D')

# Show conflicted files if any
# if [ -n \"\$files\" ]; then
#     prompt=\$prompt\" \\[\$COLOR_RED\\](\\[\$COLOR_YELLOW\\]\"
#     prompt=\$prompt\"\\[`tput sc`\\]  \\[`tput rc`\\]\\[\$COLOR_YELLOW\\]\\[\$CONFLICT_CHAR\\] \"
#     prompt=\$prompt\"\\[\$COLOR_RED\\] \${files})\"
# fi

# From https://github.com/adamv/dotfiles/blob/master/bashrc
# function parse_git_branch {
#   branch_pattern="^# On branch ([^${IFS}]*)"
#   remote_pattern_ahead="# Your branch is ahead of"
#   remote_pattern_behind="# Your branch is behind"
#   remote_pattern_ff="# Your branch (.*) can be fast-forwarded."
#   diverge_pattern="# Your branch and (.*) have diverged"
# 
#   git_status="$(git status 2> /dev/null)"
#   if [[ ! ${git_status} =~ ${branch_pattern} ]]; then
#     # Rebasing?
#     toplevel=$(git rev-parse --show-toplevel 2> /dev/null)
#     [[ -z "$toplevel" ]] && return
# 
#     [[ -d "$toplevel/.git/rebase-merge" || -d "$toplevel/.git/rebase-apply" ]] && {
#       sha_file="$toplevel/.git/rebase-merge/stopped-sha"
#       [[ -e "$sha_file" ]] && {
#         sha=`cat "${sha_file}"`
#       }
#       echo "${PINK}(rebase in progress)${COLOR_NONE} ${sha}"
#     }
#     return
#   fi
# 
#   branch=${BASH_REMATCH[1]}
# 
#   # Dirty?
#   if [[ ! ${git_status} =~ "working directory clean" ]]; then
#     [[ ${git_status} =~ "modified:" ]] && {
#       git_is_dirty="${RED}${LIGHTNING_BOLT}"
#     }
# 
#     [[ ${git_status} =~ "Untracked files" ]] && {
#       git_is_dirty="${git_is_dirty}${WHITE}${MIDDOT}"
#     }
# 
#     [[ ${git_status} =~ "new file:" ]] && {
#       git_is_dirty="${git_is_dirty}${LT_GREEN}+"
#     }
# 
#     [[ ${git_status} =~ "deleted:" ]] && {
#       git_is_dirty="${git_is_dirty}${RED}-"
#     }
# 
#     [[ ${git_status} =~ "renamed:" ]] && {
#       git_is_dirty="${git_is_dirty}${YELLOW}→"
#     }
#   fi
# 
#   # Are we ahead of, beind, or diverged from the remote?
#   if [[ ${git_status} =~ ${remote_pattern_ahead} ]]; then
#     remote="${YELLOW}${UP_ARROW}"
#   elif [[ ${git_status} =~ ${remote_pattern_ff} ]]; then
#     remote_ff="${WHITE}${FF_ARROW}"
#   elif [[ ${git_status} =~ ${remote_pattern_behind} ]]; then
#     remote="${YELLOW}${DOWN_ARROW}"
#   elif [[ ${git_status} =~ ${diverge_pattern} ]]; then
#     remote="${YELLOW}${UD_ARROW}"
#   fi
# 
#   echo "${remote}${remote_ff}${GREEN}(${branch})${COLOR_NONE}${git_is_dirty}${COLOR_NONE}"
# }
