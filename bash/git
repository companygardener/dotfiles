MAX_CONFLICTED_FILES=2
DELTA_CHAR="✎"
CONFLICT_CHAR="☢"
BISECTING_TEXT="✄"
NOBRANCH_TEXT="DETACHED"
SUBMODULE_TEXT="submodule "

git-seconds() {
  now=`date +%s`
  last=`git log --pretty=format:'%at' -1`

  echo $((now - last))
}

git-minutes() {
  seconds=`git-seconds`
  echo $((seconds / 60))
}

git-current-branch() {
  local ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo ${ref#refs/heads/}
}


git-prompt() {
  fn_exists __gitdir

  if [ $? -eq 0 ]; then
    local g="$(__gitdir 2>&1)"

    if [ -n "$g" ]; then
      status=$(git status)
      change=$(echo $status | egrep 'modified:|deleted:|new file:')

      if [ -n "$change" ]; then
        change=" $DELTA_CHAR "
      fi

      local minutes=`git-minutes`

      if [ "$minutes" -gt 30 ]; then
        local color=${RED}
      elif [ "$minutes" -gt 10 ]; then
        local color=${YELLOW}
      else
        local color=${GREEN}
      fi

      local message="${color}${minutes}m${NO_COLOR}"

      num=$(echo $(git status) | grep "Your branch is ahead of" | awk '{split($0,a," "); print a[13];}') || return

      if [ -n "$num" ]; then
        num=" +$num"
      else
        num=""
      fi

      # The __git_ps1 function inserts the current git branch where %s is
      local prompt="$YELLOW[$(git-current-branch)$num$change]$NO_COLOR ${message}"
    fi
  else
    local message=`pyprompt`

    if [ -n "$message" ]; then
      local prompt="[${message}]"
    else
      local prompt=""
    fi
  fi

  echo -e ${prompt}
}


# any conflicts? (sed madness is to remove line breaks)
# files=\$(git ls-files -u | cut -f 2 | sort -u | sed '$(($MAX_CONFLICTED_FILES+1)),1000d' |  sed -e :a -e '\$!N;s/\\\n/, /;ta' -e 'P;D')

# Show conflicted files if any
# if [ -n \"\$files\" ]; then
#     prompt=\$prompt\" \\[\$COLOR_RED\\](\\[\$COLOR_YELLOW\\]\"
#     prompt=\$prompt\"\\[`tput sc`\\]  \\[`tput rc`\\]\\[\$COLOR_YELLOW\\]\\[\$CONFLICT_CHAR\\] \"
#     prompt=\$prompt\"\\[\$COLOR_RED\\] \${files})\"
# fi
