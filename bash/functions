show-hidden-files() {
  defaults write com.apple.finder AppleShowAllFiles $1
  killall Finder
}

add-dock-space-left() {
  defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type="spacer-tile";}'
  killall Dock
}

add-dock-space-right() {
  defaults write com.apple.dock persistent-others -array-add '{tile-data={}; tile-type="spacer-tile";}'
  killall Dock
}

add-alias() {
  local name=$1 value="$2"
  echo "alias $name='$value'" >> ~/bin/dotfiles/bash/aliases
  eval "alias $name='$value'"
  alias $name
}

cdgem() {
  cd `gem env gemdir`/gems
  cd `ls | grep $1 | sort | awk '{print $9}' | tail -1`
}

gemdoc() {
  GEMDIR=`gem env gemdir`/doc
  open $GEMDIR/`ls $GEMDIR | grep $1 | sort | awk '{print $9}' | tail -1`/rdoc/index.html
}

mategem() {
  GEMDIR=`gem env gemdir`/gems
  mate $GEMDIR/`ls $GEMDIR | grep $1 | sort | awk '{print $9}' | tail -1`
}

# Easy extract
extract() {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       rar x $1       ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

alias xt=extract

large-files() {
  for file in $(find / -type f -size +"$1" 2> /dev/null); do ls -lh $file; done
}

awksum() {
  awk "
    !/^$/ { delta = \$$1 - mean; mean += delta / NR; mean2 += delta * (\$$1 - mean); sum += \$$1; count += 1; }

    NR == 1 { min = \$$1; max = \$$1 }

    \$$1 <= min && !/^$/ { min = \$$1 }
    \$$1 >= max && !/^$/ { max = \$$1 }

    END { printf(\"%d lines -- sum: %d avg: %d stdev: %d min: %d max: %d\n\", count, sum, mean, sqrt(mean2 / count), min, max); }"
}

awksumall() {
  awk -F"${1:-' '}" -f ~/.awk/numerical.awk
}

awksample() {
  split="$1"
  [ -z $1 ] && split=' '
  head -n "${2:-1}" | awk -F "$split" '{ print NR ": " $0; for(i = 1; i <= NF; ++i) print "\t" i ": " $i }'
}

gzdir() {
  tar -cf - . | pv -s $(du -s . | awk '{print $1}') | gzip > out.tgz
}

sumit () {
  ruby -e '
    sums = []
    ARGF.each {|x| puts x; x.split.each_with_index {|x,i| sums[i] = (sums[i] || 0) + x.to_i }}
    puts sums.join(" ")
  '
}
# perl -ne '
    # split into whitespace-separated fields and parse seperately
#    for (split) {
#        die "summit: error: non-numeric input (\"$_\")\n"
#            unless (m/^0x[a-fA-F\d]+$/ ||
#      s/(^-?\d*\.?\d+([eE]-?\d+)?)\%?$/$1/);
#        $n += eval($_);
#    }
#    END { print "$n\n"; } ' $*
#}
